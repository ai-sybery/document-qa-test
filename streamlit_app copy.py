import streamlit as st
import google.generativeai as genai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞
api_key = "AIzaSyCJy8Mh3MDuQy3FxI11PxO5UBhe-sczgdA"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
genai.configure(api_key=api_key)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Gemini
model = genai.GenerativeModel("gemini-1.5-flash")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìÑ Document Question Answering")
st.write(
    "Upload a document below and ask a question about it ‚Äì Gemini will answer! "
    "To use this app, you need to provide a Google API key."
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader(
    "Upload a document (.txt or .md)", type=("txt", "md")
)

# –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
question = st.text_area(
    "Now ask a question about the document!",
    placeholder="Can you give me a short summary?",
    disabled=not uploaded_file,
)

if uploaded_file and question:
    document = None
    # –°–±—Ä–æ—Å —É–∫–∞–∑–∞—Ç–µ–ª—è —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ
    uploaded_file.seek(0)
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
    encodings = ['utf-8-sig', 'utf-8', 'cp1251', 'iso-8859-1']
    
    for encoding in encodings:
        try:
            # –°–±—Ä–æ—Å —É–∫–∞–∑–∞—Ç–µ–ª—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            uploaded_file.seek(0)
            document = uploaded_file.read().decode(encoding)
            break  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–µ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª
        except UnicodeDecodeError:
            continue
    
    if document is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ.")
    else:
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini
            prompt = f"Here's a document: {document}\n\nQuestion: {question}\n\nPlease provide an answer based on the document content."
            
            response = model.generate_content(prompt, stream=True)
            
            # –ü–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
            response_container = st.empty()
            full_response = ""
            
            for chunk in response:
                if chunk.text:
                    full_response += chunk.text
                    response_container.markdown(full_response)
                    
        except Exception as e:
            st.error(f"Error generating response: {str(e)}")
